{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactPractice\\\\create_react_app\\\\my-app\\\\src\\\\pages\\\\LoginPage.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Container, Form, Button, Row, Col } from 'react-bootstrap';\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from \"yup\";\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { useToasts } from 'react-toast-notifications';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object().shape({\n  email: yup.string().required('Email is required!').email('Email format was wrong!'),\n  password: yup.string().required('Password is required!').min(3, 'Password character is a minimum of 3')\n});\n\nconst LoginPage = () => {\n  _s();\n\n  const history = useHistory();\n  const {\n    addToast\n  } = useToasts();\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n\n  const onSubmit = async data => {\n    try {\n      const urlLogin = 'https://api.codingthailand.com/api/login';\n      const res = await axios.post(urlLogin, {\n        email: data.email,\n        password: data.password\n      }); //keep token in localstorage convert json to string\n\n      localStorage.setItem('token', JSON.stringify(res.data)); //get profie\n\n      const urlProfile = 'https://api.codingthailand.com/api/profile';\n      const res_profile = await axios.get(urlProfile, {\n        headers: {\n          Authorization: 'Bearer ' + res.data.access_token\n        }\n      });\n      localStorage.setItem('profile', JSON.stringify(res_profile.data.data.user));\n      addToast(\"Log In success!!!\", {\n        appearance: 'success'\n      });\n      history.push('/');\n    } catch (error) {\n      addToast(error.response.data.message, {\n        appearance: 'error'\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubmit(onSubmit),\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Log In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"email\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"email\",\n              ...register(\"email\"),\n              isInvalid: errors.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, this), errors.email && /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.email.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"password\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              ...register(\"password\"),\n              isInvalid: errors.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 29\n            }, this), errors.password && /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.password.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LoginPage, \"MZyjRVb7MXE6y8m7E310JkPvcJQ=\", false, function () {\n  return [useHistory, useToasts, useForm];\n});\n\n_c = LoginPage;\nexport default LoginPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["D:/reactPractice/create_react_app/my-app/src/pages/LoginPage.js"],"names":["React","Container","Form","Button","Row","Col","useForm","yupResolver","yup","axios","useHistory","useToasts","schema","object","shape","email","string","required","password","min","LoginPage","history","addToast","register","handleSubmit","formState","errors","resolver","onSubmit","data","urlLogin","res","post","localStorage","setItem","JSON","stringify","urlProfile","res_profile","get","headers","Authorization","access_token","user","appearance","push","error","response","message"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Container, Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from \"yup\";\r\nimport axios from 'axios'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useToasts } from 'react-toast-notifications';\r\n\r\nconst schema = yup.object().shape({\r\n    email: yup.string().required('Email is required!').email('Email format was wrong!'),\r\n    password: yup.string().required('Password is required!').min(3, 'Password character is a minimum of 3')\r\n});\r\n\r\nconst LoginPage = () => {\r\n\r\n    const history = useHistory()\r\n    const { addToast } = useToasts()\r\n\r\n    const { register, handleSubmit, formState:{ errors } } = useForm({\r\n        resolver: yupResolver(schema)\r\n    });\r\n\r\n    const onSubmit = async (data) => {\r\n        try{\r\n            const urlLogin = 'https://api.codingthailand.com/api/login'\r\n\r\n            const res = await axios.post(urlLogin,{\r\n                email: data.email,\r\n                password: data.password\r\n            })\r\n\r\n            //keep token in localstorage convert json to string\r\n            localStorage.setItem('token', JSON.stringify(res.data))\r\n\r\n            //get profie\r\n            const urlProfile = 'https://api.codingthailand.com/api/profile'\r\n            const res_profile = await axios.get(urlProfile,{\r\n                headers: {\r\n                    Authorization: 'Bearer ' + res.data.access_token\r\n                }\r\n            })\r\n\r\n            localStorage.setItem('profile', JSON.stringify(res_profile.data.data.user))\r\n\r\n            addToast(\"Log In success!!!\", { appearance: 'success' });\r\n            history.push('/')\r\n\r\n        }catch(error){\r\n            addToast(error.response.data.message, { appearance: 'error' });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container className=\"mt-4\">\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <Form onSubmit={handleSubmit(onSubmit)}>\r\n                        <h1>Log In</h1>\r\n                        <Form.Group controlId=\"email\">\r\n                            <Form.Label>Email</Form.Label>\r\n                            <Form.Control \r\n                                type=\"email\" \r\n                                {...register(\"email\")} \r\n                                isInvalid={errors.email}\r\n                            />\r\n                            {\r\n                                errors.email && (\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        {errors.email.message}\r\n                                    </Form.Control.Feedback>\r\n                                )\r\n                            }\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"password\">\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control \r\n                                type=\"password\" \r\n                                {...register(\"password\")} \r\n                                isInvalid={errors.password}\r\n                            />\r\n                            {\r\n                                errors.password && (\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        {errors.password.message}\r\n                                    </Form.Control.Feedback>\r\n                                )\r\n                            }\r\n                        </Form.Group>\r\n\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Submit\r\n                        </Button>\r\n\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n            <hr />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LoginPage\r\n"]},"metadata":{},"sourceType":"module"}