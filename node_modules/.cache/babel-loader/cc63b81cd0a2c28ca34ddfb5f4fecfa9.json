{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactPractice\\\\create_react_app\\\\my-app\\\\src\\\\pages\\\\UploadPage.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Form, Container, Row, Col } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport axios from 'axios'; // import { useHistory } from 'react-router-dom'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SUPPORTED_IMAGE_FORMATS = ['image/jpeg', 'image/jpg'];\n\nconst UploadPage = () => {\n  _s();\n\n  // const history = useHistory()\n  const {\n    handleSubmit,\n    formState: {\n      errors\n    },\n    register\n  } = useForm();\n\n  const onSubmit = data => {\n    let imgUpload = data.picture[0];\n    const reader = new FileReader();\n    reader.readAsDataURL(imgUpload);\n\n    reader.onload = async e => {\n      let base64Img = e.target.result;\n      const urlAPI = 'https://api.codingthailand.com/api/upload';\n      const res = await axios.post(urlAPI, {\n        picture: base64Img\n      });\n      alert(res.data.data.message);\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        md: 6,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Upload Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubmit(onSubmit),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3 mt-4\",\n            children: /*#__PURE__*/_jsxDEV(Form.File, {\n              children: [/*#__PURE__*/_jsxDEV(Form.File.Label, {\n                children: \"Choose file picture.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.File.Input, {\n                type: \"file\",\n                ...register(\"picture\", {\n                  required: '** Please input file picture.',\n                  validate: {\n                    checkFileType: value => {\n                      return value && SUPPORTED_IMAGE_FORMATS.includes(value[0].type);\n                    }\n                  }\n                }),\n                isInvalid: errors.picture\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 33\n              }, this), errors.picture && errors.picture.type === \"required\" && /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                type: \"invalid\",\n                children: errors.picture.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 41\n              }, this), errors.picture && errors.picture.type === \"checkFileType\" && /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                type: \"invalid\",\n                children: \"Picture was supported only file type .jpg or jpeg.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            type: \"submit\",\n            children: \"Upload...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UploadPage, \"IOJcP57T0ryIjYX2blcn2hO60Zo=\", false, function () {\n  return [useForm];\n});\n\n_c = UploadPage;\nexport default UploadPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadPage\");","map":{"version":3,"sources":["D:/reactPractice/create_react_app/my-app/src/pages/UploadPage.js"],"names":["React","Form","Container","Row","Col","useForm","axios","SUPPORTED_IMAGE_FORMATS","UploadPage","handleSubmit","formState","errors","register","onSubmit","data","imgUpload","picture","reader","FileReader","readAsDataURL","onload","e","base64Img","target","result","urlAPI","res","post","alert","message","required","validate","checkFileType","value","includes","type"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,GAA1B,EAA+BC,GAA/B,QAAyC,iBAAzC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;;AAEA,MAAMC,uBAAuB,GAAG,CAAC,YAAD,EAAe,WAAf,CAAhC;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAErB;AAEA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,SAAS,EAAC;AAAEC,MAAAA;AAAF,KAA1B;AAAsCC,IAAAA;AAAtC,MAAmDP,OAAO,EAAhE;;AAEA,QAAMQ,QAAQ,GAAIC,IAAD,IAAU;AAEvB,QAAIC,SAAS,GAAGD,IAAI,CAACE,OAAL,CAAa,CAAb,CAAhB;AAEA,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,IAAAA,MAAM,CAACE,aAAP,CAAqBJ,SAArB;;AACAE,IAAAA,MAAM,CAACG,MAAP,GAAgB,MAAOC,CAAP,IAAa;AAEzB,UAAIC,SAAS,GAAGD,CAAC,CAACE,MAAF,CAASC,MAAzB;AACA,YAAMC,MAAM,GAAG,2CAAf;AACA,YAAMC,GAAG,GAAG,MAAMpB,KAAK,CAACqB,IAAN,CAAWF,MAAX,EAAkB;AAChCT,QAAAA,OAAO,EAAEM;AADuB,OAAlB,CAAlB;AAIAM,MAAAA,KAAK,CAACF,GAAG,CAACZ,IAAJ,CAASA,IAAT,CAAce,OAAf,CAAL;AACH,KATD;AAUH,GAhBD;;AAkBA,sBACI,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,MAArB;AAAA,4BACI,QAAC,GAAD;AAAA,6BACI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,IAAD;AAAM,UAAA,QAAQ,EAAEpB,YAAY,CAACI,QAAD,CAA5B;AAAA,kCACI;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,mCACI,QAAC,IAAD,CAAM,IAAN;AAAA,sCACI,QAAC,IAAD,CAAM,IAAN,CAAW,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,IAAD,CAAM,IAAN,CAAW,KAAX;AACI,gBAAA,IAAI,EAAC,MADT;AAAA,mBAEQD,QAAQ,CAAC,SAAD,EAAW;AACnBkB,kBAAAA,QAAQ,EAAE,+BADS;AAEnBC,kBAAAA,QAAQ,EAAE;AACNC,oBAAAA,aAAa,EAAGC,KAAD,IAAW;AACtB,6BAAOA,KAAK,IAAI1B,uBAAuB,CAAC2B,QAAxB,CAAiCD,KAAK,CAAC,CAAD,CAAL,CAASE,IAA1C,CAAhB;AACH;AAHK;AAFS,iBAAX,CAFhB;AAUI,gBAAA,SAAS,EAAExB,MAAM,CAACK;AAVtB;AAAA;AAAA;AAAA;AAAA,sBAFJ,EAeQL,MAAM,CAACK,OAAP,IAAkBL,MAAM,CAACK,OAAP,CAAemB,IAAf,KAAwB,UAA1C,iBACI,QAAC,IAAD,CAAM,OAAN,CAAc,QAAd;AAAuB,gBAAA,IAAI,EAAC,SAA5B;AAAA,0BACKxB,MAAM,CAACK,OAAP,CAAea;AADpB;AAAA;AAAA;AAAA;AAAA,sBAhBZ,EAsBQlB,MAAM,CAACK,OAAP,IAAkBL,MAAM,CAACK,OAAP,CAAemB,IAAf,KAAwB,eAA1C,iBACI,QAAC,IAAD,CAAM,OAAN,CAAc,QAAd;AAAuB,gBAAA,IAAI,EAAC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAvBZ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eAgCI;AAAQ,YAAA,SAAS,EAAC,iBAAlB;AAAoC,YAAA,IAAI,EAAC,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhCJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAuCU;AAAA;AAAA;AAAA;AAAA,YAvCV;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA2CH,CAnED;;GAAM3B,U;UAIuDH,O;;;KAJvDG,U;AAqEN,eAAeA,UAAf","sourcesContent":["import React from 'react'\r\nimport { Form, Container, Row, Col} from 'react-bootstrap'\r\nimport { useForm } from 'react-hook-form'\r\nimport axios from 'axios'\r\n// import { useHistory } from 'react-router-dom'\r\n\r\nconst SUPPORTED_IMAGE_FORMATS = ['image/jpeg', 'image/jpg']\r\n\r\nconst UploadPage = () => {\r\n\r\n    // const history = useHistory()\r\n\r\n    const { handleSubmit, formState:{ errors }, register } = useForm()\r\n\r\n    const onSubmit = (data) => {\r\n\r\n        let imgUpload = data.picture[0]\r\n\r\n        const reader = new FileReader()\r\n        reader.readAsDataURL(imgUpload)\r\n        reader.onload = async (e) => {\r\n\r\n            let base64Img = e.target.result\r\n            const urlAPI = 'https://api.codingthailand.com/api/upload'\r\n            const res = await axios.post(urlAPI,{\r\n                picture: base64Img\r\n            })\r\n\r\n            alert(res.data.data.message)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container className=\"mt-4\">\r\n            <Row>\r\n                <Col md={6}>\r\n                    <h1>Upload Image</h1>\r\n                    <Form onSubmit={handleSubmit(onSubmit)}>\r\n                        <div className=\"mb-3 mt-4\">\r\n                            <Form.File>\r\n                                <Form.File.Label>Choose file picture.</Form.File.Label>\r\n                                <Form.File.Input\r\n                                    type=\"file\"\r\n                                    {...register(\"picture\",{\r\n                                        required: '** Please input file picture.',\r\n                                        validate: {\r\n                                            checkFileType: (value) => {\r\n                                                return value && SUPPORTED_IMAGE_FORMATS.includes(value[0].type)\r\n                                            }\r\n                                        }\r\n                                    })}\r\n                                    isInvalid={errors.picture}\r\n                                />\r\n                                {\r\n                                    errors.picture && errors.picture.type === \"required\" && (\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.picture.message}\r\n                                        </Form.Control.Feedback>\r\n                                    )\r\n                                }\r\n                                {\r\n                                    errors.picture && errors.picture.type === \"checkFileType\" && (\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            Picture was supported only file type .jpg or jpeg.\r\n                                        </Form.Control.Feedback>\r\n                                    )\r\n                                }\r\n                            </Form.File>\r\n                        </div>\r\n                        <button className=\"btn btn-primary\" type=\"submit\">Upload...</button>\r\n                    </Form>\r\n                </Col>\r\n            </Row><hr/>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default UploadPage\r\n"]},"metadata":{},"sourceType":"module"}